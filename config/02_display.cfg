[display]
#	mini12864 LCD Display
lcd_type: uc1701
cs_pin: z:EXP1_3
a0_pin: z:EXP1_4
encoder_pins: ^z:EXP2_3,^z:EXP2_5
click_pin: !z:EXP1_2
kill_pin: ^!z:EXP1_5
contrast: 63
menu_reverse_navigation: false
menu_timeout: 20
display_group: __with_chamber

[display_status]

[neopixel fysetc_mini12864]
#	To control Neopixel RGB in mini12864 display
pin: z:EXP1_6
chain_count: 3
initial_RED: 0.1
initial_GREEN: 0.5
initial_BLUE: 0.0
color_order: RGB

#	Set RGB values on boot up for each Neopixel. 
#	Index 1 = display, Index 2 and 3 = Knob
[delayed_gcode setdisplayneopixel]
initial_duration: 1
gcode:
       SET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 INDEX=1 TRANSMIT=0
       SET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 INDEX=2 TRANSMIT=0
       SET_LED LED=fysetc_mini12864 RED=0 GREEN=1 BLUE=1 INDEX=3 


# SOUND -------------------------------------------------------------------
[output_pin BEEPER]
pin: z:EXP1_1
cycle_time: 0.001 # 1 khz
scale: 100
pwm: True
shutdown_value: 0

# DISPLAY DATA -------------------------------------------------------------
[display_data __with_chamber extruder]
position: 0, 0
text:
  {% set active_extruder = printer.toolhead.extruder %}
  { render("_heater_temperature", param_heater_name=active_extruder) }

[display_data __with_chamber fan]
position: 0, 10
text: { render("_fan_speed") }

[display_data __with_chamber heater_bed]
position: 1, 0
text: { render("_heater_temperature", param_heater_name="heater_bed") }

[display_data __with_chamber print_progress]
position: 1, 10
text:
  { "{:^6.0%}".format(printer.display_status.progress) }
  
[display_data __with_chamber progress_bar]
position: 1, 10
text:
  { draw_progress_bar(1, 10, 6, printer.display_status.progress) }

[display_data __with_chamber printing_time]
position: 2, 10
text: { "%6s" % (render("_printing_time").strip(),) }

[display_data __with_chamber chamber]
position: 2, 0
text: { render("_chamber_temperature") }

[display_data __with_chamber print_status]
position: 3, 0
text: { render("_print_status") }

# DISPLAY TEMPLATE-------------------------------------------------------------
[display_template _chamber_temperature]
param_sensor_name: "temperature_fan exhaust"
text:
	~chamber~
  {% if param_sensor_name in printer %}
    {% set chamber = printer[param_sensor_name] %}
    { "%3.0f" % (chamber.temperature,) }
    # Optionally show target
    {% if chamber.target and (chamber.temperature - chamber.target) > 2 %}
      ~right_arrow~
      { "%0.0f" % (chamber.target,) }
    {% endif %}
    ~degrees~
  {% else %}
   { "  -"}
  {% endif %}

[display_template _print_status]
text:
  {% if printer.display_status.message %}
    { printer.display_status.message }
  {% elif printer.idle_timeout.printing_time %}
    {% set pos = printer.toolhead.position %}
    { "X%-4.0fY%-4.0fZ%-5.2f" % (pos.x, pos.y, pos.z) }
  {% else %}
    ~voron~ Ready
  {% endif %}

[display_template _printing_time]
text:
  {% set ptime = printer.idle_timeout.printing_time %}
  {% set progress = printer.display_status.progress %}
  {% if progress >= 0.05 and ptime % 12 >= 6 %}
    # Periodically show time remaining
    {% set rtime = (ptime / progress) - ptime %}
    { "R%02d:%02d" % (rtime // (60 * 60), (rtime // 60) % 60) }
  {% else %}
    {% set msg = "%02d:%02d" % (ptime // (60 * 60), (ptime // 60) % 60) %}
    { "%6s" % (msg,) }
  {% endif %}

# DISPLAY GLYPH -----------------------------------------------------------------
[display_glyph chamber]
data:
  ................
  ****************
  *....*....*....*
  *....*....*....*
  *....******....*
  *..............*
  *..............*
  *.....****.....*
  *.***.*..*.***.*
  *.....****.....*
  *......**......*
  *..............*
  *.************.*
  *...*......*...*
  ****************
  ................

[display_glyph voron]
data:
   .......**.......
   .....******.....
   ....********....
   ..************..
   .*****..**..***.
   .****..**..****.
   .***..**..*****.
   .**..**..******.
   .******..**..**.
   .*****..**..***.
   .****..**..****.
   .***..**..*****.
   ..************..
   ....********....
   .....******.....
   .......**.......

[display_glyph trex]
data:
  .......******...
  .......**.*****.
  .......********.
  .......********.
  .......****.....
  .......*******..
  *.....****......
  *....********...
  **..******......
  **********......
  .*********......
  ..*******.......
  ...*****........
  ....**.*........
  ....*..*........
  ....**.**.......