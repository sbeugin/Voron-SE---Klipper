## Voron Design VORON2 250/300/350mm SKR 1.4 TMC2209 UART config

## *** THINGS TO CHANGE/CHECK: ***
## MCU paths							   [mcu] section
## Thermistor types						[extruder] and [heater_bed] sections - See 'sensor types' list at end of file
## Z Endstop Switch location			[safe_z_home] section
## Homing end position              [gcode_macro G32] section
## Z Endstop Switch  offset for Z0  [stepper_z] section
## Probe points							[quad_gantry_level] section
## Min & Max gantry corner postions quad_gantry_level] section
## PID tune								   [extruder] and [heater_bed] sections
## Fine tune E steps					   [extruder] section

#####################################################################
# 	Pin Definitions
#####################################################################

[board_pins]
mcu: mcu, z
aliases:
    # TMC StallGuard DIAG pins
    X_DIAG=P1.29, Y_DIAG=P1.28, Z_DIAG=P1.27, 
    E0_DIAG=P1.26, E1_DIAG=P1.25, 

    # TMC software SPI
    TMC_SW_MOSI=P1.17,
    TMC_SW_MISO=P0.5,
    TMC_SW_SCK=P0.4,

    # Servos
    SERVO0=P2.00,

    # Limit Switches
    X_MIN=P1.26, X_MAX=P1.29,
    Y_MIN=P1.25, Y_MAX=P1.28,
    Z_MIN=P1.24, Z_MAX=P1.27,

    # Steppers
    X_STEP=P2.2, X_DIR=P2.6, X_ENABLE=P2.1, X_CS=P1.10,
    Y_STEP=P0.19, Y_DIR=P0.20, Y_ENABLE=P2.8, Y_CS=P1.9,
    Z_STEP=P0.22, Z_DIR=P2.11, Z_ENABLE=P0.21, Z_CS=P1.8,
    E0_STEP=P2.13, E0_DIR=P0.11, E0_ENABLE=P2.12, E0_CS=P1.4,
    E1_STEP=P1.15, E1_DIR=P1.14, E1_ENABLE=P1.16, E1_CS=P1.1,
    
    # Temperature
    TEMP_0=P0.24,
    TEMP_1=P0.23,
    TEMP_BED=P0.25,
    
    # Fan
    FAN=P2.3,
    HEAT_0=P2.7,
    HEAT_1=P2.4,
    HEAT_BED=P2.5,
    PROBE=P0.10,

    # EXP1 header
    EXP1_1=P1.30, EXP1_3=P1.18, EXP1_5=P1.20, EXP1_7=P1.22, EXP1_9=<GND>,
    EXP1_2=P0.28, EXP1_4=P1.19, EXP1_6=P1.21, EXP1_8=P1.23, EXP1_10=<5V>,
    # EXP2 header
    EXP2_1=P0.17, EXP2_3=P3.26, EXP2_5=P3.25, EXP2_7=P1.31, EXP2_9=<GND>,
    EXP2_2=P0.15, EXP2_4=P0.16, EXP2_6=P0.18, EXP2_8=<RST>, EXP2_10=<NC>
    # Pins EXP2_1, EXP2_6, EXP2_2 are also MISO, MOSI, SCK of bus "ssp0"

[mcu]
##	MCU for X/Y/E steppers main MCU
##	[X in X] - B Motor
##	[Y in Y] - A Motor
##	[E in E0] - Extruder
##	Obtain definition by "ls -l /dev/serial/by-id/" then unplug to verify
##--------------------------------------------------------------------
serial: /dev/serial/by-id/usb-Klipper_lpc1768_07D0FF14A1086EAF8054DC5EC52000F5-if00
##--------------------------------------------------------------------

[mcu z]
##	MCU for Z steppers
##	[Z in X] - Front Left
##	[Z1 in Y] - Rear Left
##	[Z2 in Z] - Rear Right
##	[Z3 in E0]- Front Right
##	Obtain definition by "ls -l /dev/serial/by-id/" then unplug to verify
##--------------------------------------------------------------------
serial: /dev/serial/by-id/usb-Klipper_lpc1768_1B400011A1086EAF2A47DC5EC52000F5-if00
##--------------------------------------------------------------------

[printer]
kinematics: corexy
max_velocity: 350  
max_accel: 4600    			#Max 4000
#max_accel_to_decel: 7000 
max_z_velocity: 25 			#Max 15 for 12V TMC Drivers, can increase for 24V
max_z_accel: 350
square_corner_velocity: 5.0

#####################################################################
# 	X/Y Stepper Settings
#####################################################################

[stepper_x]
##	Connected to X on mcu_xye (B Motor)
step_pin: X_STEP
dir_pin: X_DIR
enable_pin: !X_ENABLE
rotation_distance: 32 #Gear 16x teeth
microsteps: 16
full_steps_per_rotation:200  #set to 400 for 0.9 degree stepper
endstop_pin: X_MAX
position_min: 0
position_endstop: 350
position_max: 350
homing_speed: 100   #Max 100
homing_retract_dist: 5
homing_positive_dir: true

[stepper_y]
##	Connected to Y on mcu_xye (A Motor)
step_pin: Y_STEP
dir_pin: Y_DIR
enable_pin: !Y_ENABLE
rotation_distance: 32 #Gear 16x teeth
microsteps: 16
full_steps_per_rotation:200  #set to 400 for 0.9 degree stepper
endstop_pin: Y_MAX
position_min: 0
position_endstop: 358
position_max: 358
homing_speed: 100  #Max 100
homing_retract_dist: 5
homing_positive_dir: true

#####################################################################
# 	Z Stepper Settings
#####################################################################

## Z MCU - In X Position
## Z0 Stepper - Front Left
[stepper_z]
step_pin: z:X_STEP
dir_pin: z:X_DIR
enable_pin: !z:X_ENABLE
rotation_distance: 40
gear_ratio: 80:16
microsteps: 16
endstop_pin: z:Z_MAX
##  Z-position of nozzle (in mm) to z-endstop trigger point relative to print surface (Z0)
##  (+) value = endstop above Z0, (-) value = endstop below
##	Increasing position_endstop brings nozzle closer to the bed
##  After you run Z_ENDSTOP_CALIBRATE, position_endstop will be stored at the very end of your config
#position_endstop: 0,49
position_max: 310
position_min: -5
homing_speed: 8
second_homing_speed: 3
homing_retract_dist: 3

##	Z MCU - In Y Position
##	Z1 Stepper - Rear Left
[stepper_z1]
step_pin: z:Y_STEP
dir_pin: !z:Y_DIR
enable_pin: !z:Y_ENABLE
rotation_distance: 40
gear_ratio: 80:16
microsteps: 16

##	Z MCU - In Z Position
##	Z2 Stepper - Rear Right
[stepper_z2]
step_pin: z:Z_STEP
dir_pin: z:Z_DIR
enable_pin: !z:Z_ENABLE
rotation_distance: 40
gear_ratio: 80:16
microsteps: 16

##	Z MCU - In E0 Position
##	Z3 Stepper - Front Right
[stepper_z3]
step_pin: z:E0_STEP
dir_pin: !z:E0_DIR
enable_pin: !z:E0_ENABLE
rotation_distance: 40
gear_ratio: 80:16
microsteps: 16

#####################################################################
# 	Extruder
#####################################################################

#	E0 on MCU X/Y
[extruder]
step_pin: E0_STEP
dir_pin: E0_DIR
enable_pin: !E0_ENABLE
##	Update value below when you perform extruder calibration
##	If you ask for 100mm of filament, but in reality it is 98mm:
##	rotation_distance = <previous_rotation_distance> * <actual_extrude_distance> / 100
##  22.6789511 is a good starting point
rotation_distance: 22.3735412	#Bondtech 5mm Drive Gears
##	Update Gear Ratio depending on your Extruder Type
##	Use 50:17 for Afterburner/Clockwork (BMG Gear Ratio)
##	Use 80:20 for M4, M3.1
gear_ratio: 50:17				#BMG Gear Ratio
microsteps: 16
full_steps_per_rotation: 200	#200 for 1.8 degree, 400 for 0.9 degree
nozzle_diameter: 0.400
filament_diameter: 1.75
heater_pin: HEAT_0
##	Validate the following thermistor type to make sure it is correct
sensor_type: ATC Semitec 104GT-2
sensor_pin: TEMP_0
min_temp: 10
max_temp: 290
max_power: 1.0
min_extrude_temp: 170
max_extrude_only_distance: 300
control = pid
pid_kp = 24.212
pid_ki = 1.323
pid_kd = 110.771
##	Try to keep pressure_advance below 1.0
pressure_advance: 0.03
##	Default is 0.040, leave stock
pressure_advance_smooth_time: 0.040

#####################################################################
# 	drivers
#####################################################################

##	Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_x]
uart_pin: X_CS
interpolate: True
run_current: 0.8
hold_current: 0.7
sense_resistor: 0.110
stealthchop_threshold: 0

[tmc2209 stepper_y]
uart_pin: Y_CS
interpolate: True
run_current: 0.8
hold_current: 0.7
sense_resistor: 0.110
stealthchop_threshold: 0

[tmc2209 stepper_z]
uart_pin: z:X_CS
interpolate: true
run_current: 0.9
hold_current: 0.7
sense_resistor: 0.110
stealthchop_threshold: 0

[tmc2209 stepper_z1]
uart_pin: z:Y_CS
interpolate: true
run_current: 0.9
hold_current: 0.7
sense_resistor: 0.110
stealthchop_threshold: 0

[tmc2209 stepper_z2]
uart_pin: z:Z_CS
interpolate: true
run_current: 0.9
hold_current: 0.7
sense_resistor: 0.110
stealthchop_threshold: 0

[tmc2209 stepper_z3]
uart_pin: z:E0_CS
interpolate: true
run_current: 0.9
hold_current: 0.7
sense_resistor: 0.110
stealthchop_threshold: 0

[tmc2209 extruder]
uart_pin: E0_CS
interpolate: false
run_current: 0.52
hold_current: 0.4
sense_resistor: 0.110
stealthchop_threshold: 0

#####################################################################
# 	Bed Heater
#####################################################################

[heater_bed]
##	SSR Pin - Z board, Fan Pin
heater_pin: z:FAN
sensor_type: NTC 100K beta 3950
sensor_pin: z:TEMP_BED
##	Adjust Max Power so your heater doesn't warp your bed
max_power: 0.6
min_temp: 0
max_temp: 120
control: pid
pid_kp: 40.436
pid_ki: 1.859
pid_kd: 219.872

#####################################################################
# 	Probe
#####################################################################

[probe]
##	Inductive Probe
pin: ^z:PROBE
x_offset: 0
y_offset: 25.0
#z_offset: 1.2
speed: 10.0 #default 10
samples: 3
samples_result: median
sample_retract_dist: 2.0
samples_tolerance: 0.006
samples_tolerance_retries: 3
activate_gcode: |
   M117 Bed probing..
deactivate_gcode: |
   M117

#####################################################################
# 	Fan Control
#####################################################################

[heater_fan hotend_fan]
##	Hotend Fan - XYE board, HE1 Connector
pin: HEAT_1
max_power: 1.0
kick_start_time: 0.5
heater: extruder
heater_temp: 50.0
##	If you are experiencing back flow, you can reduce fan_speed
fan_speed: 0.6       ; default 1

[fan]
##	Print Cooling Fan - XYE board, Fan Pin
pin: FAN
kick_start_time: 0.5
max_power: 1 # 0.8       ; default 1
##	Depending on your fan, you may need to increase this value
##	if your fan will not start. Can change cycle_time (increase)
##	if your fan is not able to slow down effectively
off_below: 0.13   ; Default 0.1
cycle_time: 0.001 ; default 0,01 

[heater_fan controller_fan]
##	Controller fan - Z board, HE1 Connector
pin: z:HEAT_1
kick_start_time: 1   ; default 0.5
heater: heater_bed
heater_temp: 45.0
fan_speed: 0.5       ; 1 default

[temperature_fan exhaust]
#	Exhaust fan - Z board, HE0 Connector
pin: z:HEAT_0
sensor_type: NTC 100K beta 3950  # ATC Semitec 104GT-2
sensor_pin: TEMP_BED
max_power: 1.0
shutdown_speed: 0.0
kick_start_time: 5.0
min_temp: 0
max_temp: 70
target_temp: 55.0   ; Activate Exhaust fan at this temperature
control: watermark
gcode_id: C

#####################################################################
# 	LED Control
#####################################################################

[output_pin caselight]
#Chamber Lighting - Bed Connector (Optional)
pin: z:HEAT_BED
pwm:true
value: 0.6
scale: 1
cycle_time: 0.01 # to avoid flickering

#####################################################################
# 	Homing and Gantry Adjustment Routines
#####################################################################

[idle_timeout]
gcode:
   TURN_OFF_HEATERS
   M84                  ; disable steppers
   TURN_OFF_LIGHTS
timeout: 1800           ; 30 Min

[homing_override]
axes: z
set_position_z: 0
gcode: |
   ##### set defaults #####
   {% set Z_MIN_POS_X = 231 %}            ; x endstop position
   {% set Z_MIN_POS_Y = 356 %}            ; y endstop position
   {% set XY_SPEED = 350 %}               ; xy movements speed mm/s
   {% set Z_SPEED = 50 %}                 ; z movements speed mm/s
   {% set Z_LIFT = 5 %}                   ; z lift before XY home
   {% set HOMED_Z_LIFT = 10 %}            ; z lift after Z home
   {% set PARK_SPEED = 350 %}             ; parking movement speed mm/s
   {% set x = params.X|default(20) %}     ; edit to your park position
   {% set y = params.Y|default(320) %}    ; edit to your park position
   ##### check if x and y was homed #####
   {% set WAS_HOMED_XY = ('x' in printer.toolhead.homed_axes) and ('y' in printer.toolhead.homed_axes) %}
   ##### end of definitions #####

   G90                                             ; absolute position
   BED_MESH_CLEAR
   {% if Z_LIFT|float > 0 %}                       
      G0 Z{Z_LIFT|float} F{(Z_SPEED * 60)|int}     ; lift Z 10mm
   {% endif %}

   {% if not WAS_HOMED_XY %}
      G28 X Y                                      ; home x y
   {% endif %}   

   {% set HOME_Z %}
      G0 X{ Z_MIN_POS_X } Y{ Z_MIN_POS_Y } F{(XY_SPEED * 60)|int} ; move to endstop XY position
      G28 Z                                                       ; home Z
      {% if HOMED_Z_LIFT|float > 0 %}
         G0 Z{HOMED_Z_LIFT|float} F{(Z_SPEED * 60)|int}           ; remonter de 5
      {% endif %}
   {% endset %}

   {HOME_Z}

   {% if not WAS_HOMED_XY %}
      { action_respond_info("Gantry was non homed, running gantry level..") }
      QUAD_GANTRY_LEVEL
      {HOME_Z}
   {% endif %}

   {% if PARK_SPEED|int > 0 %}
      G0 X{x} Y{y} Z40 F{(PARK_SPEED * 60)|int}
   {% endif %}      

[quad_gantry_level]
##	Use QUAD_GANTRY_LEVEL to level a gantry.
##	Min & Max gantry corners - measure from nozzle at MIN (0,0) and 
##	MAX (250, 250), (300,300), or (350,350) depending on your printer size
#	to respective belt positions
#	for 350mm build
gantry_corners:
	-60,-10
	410,420
#	Probe points
points:
    50,25
	50,275
	300,275
	300,25
speed: 350
horizontal_move_z: 5
retries: 5
retry_tolerance: 0.0075
max_adjust: 10

#	BED_MESH_CALIBRATE
[bed_mesh]
speed: 350
horizontal_move_z: 5
probe_count: 12,12   ; 12x12=144 points 
# fade_start: 0.5
# fade_end: 25.0
# split_delta_z: .01
move_check_distance: 3
mesh_pps: 0,0
algorithm: bicubic
relative_reference_index: 135
#For 300mm Size:
mesh_min: 10,25 #10,25
mesh_max: 340,340 #340,315

####################################################################
# 	Optional Settings
#####################################################################

# Force Move for manual stepper control
[force_move]
enable_force_move: true

# Pause/Resume Functionality
[pause_resume]
recover_velocity: 100

# This adds the 'respond' G-Code that you can use to send commands back to OctoPrint
[respond]
default_type: echo

# add virtual sd card
[virtual_sdcard]
path: ~/gcode_files/

# Raspberry Pi Temperature
[temperature_sensor raspberry_pi]
sensor_type: temperature_host
min_temp: 10
max_temp: 100

# Z Endstop accuracy with ENDSTOP_PHASE_CALIBRATE STEPPER=stepper_z
[endstop_phase]
# ENDSTOP_PHASE_CALIBRATE STEPPER=stepper_z

#####################################################################
# 	Displays
#####################################################################

[include ./DISPLAY/*.cfg]

#####################################################################
# 	Menu
#####################################################################

[include ./MENU/*.cfg]

#####################################################################
# 	Macros
#####################################################################

[include ./MACRO/*.cfg]

#####################################################################
# 	Accelerometer
#####################################################################

[mcu rpi]
serial: /tmp/klipper_host_mcu

[adxl345]
cs_pin: rpi:None

[resonance_tester]
accel_chip: adxl345
probe_points:
   175,175,20  # an example
#max_smoothing: 0.1

#####################################################################
# 	Input shapper
#####################################################################
[input_shaper]
shaper_type_x = mzv
shaper_freq_x = 51.0
shaper_type_y = mzv
shaper_freq_y = 39.4

#--------------------------------------------------------------------
# https://www.klipper3d.org/Resonance_Compensation.html
#https://www.klipper3d.org/Measuring_Resonances.html
#--------------------------------------------------------------------
# Test Accelrometer
#     ACCELEROMETER_QUERY
#--------------------------------------------------------------------
# setup :
#     max_accel = 7000
#     max_accel_to_decel = 7000
#Measuring the resonances
#     TEST_RESONANCES AXIS=X
#     TEST_RESONANCES AXIS=Y
# Results
# This will generate 2 CSV files (/tmp/resonances_x_*.csv and /tmp/resonances_y_*.csv). 
# These files can be processed with the stand-alone script on a Raspberry Pi. To do that, run running the following commands:
#     ~/klipper/scripts/calibrate_shaper.py /tmp/resonances_x_*.csv -o /tmp/shaper_calibrate_x.png
#     ~/klipper/scripts/calibrate_shaper.py /tmp/resonances_y_*.csv -o /tmp/shaper_calibrate_y.png
# Smoothing adjustement
#     ~/klipper/scripts/calibrate_shaper.py /tmp/resonances_x_*.csv -o /tmp/shaper_calibrate_x.png --max_smoothing=0.2

#--------------------------------------------------------------------
# To check the belt tension on CoreXY printers, execute
#     TEST_RESONANCES AXIS=1,1 OUTPUT=raw_data
#     TEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data
# and use graph_accelerometer.py to process the generated files, e.g.
#     ~/klipper/scripts/graph_accelerometer.py -c /tmp/raw_data_axis*.csv -o /tmp/resonances.png
# -------------------------------------------------------------------
# Input Shaper auto-calibration¶
#     SHAPER_CALIBRATE
#     SHAPER_CALIBRATE AXIS=X
#     SHAPER_CALIBRATE AXIS=Y
#     SAVE_CONFIG



## 	Thermistor Types
##   "EPCOS 100K B57560G104F"
##   "ATC Semitec 104GT-2"
##   "NTC 100K beta 3950"
##   "Honeywell 100K 135-104LAG-J01"
##   "NTC 100K MGB18-104F39050L32" (Keenovo Heater Pad)
##   "AD595"
##   "PT100 INA826"